package com.monebac.com.wkyk.model

import com.google.gson.annotations.SerializedName

class UserInfoModel : ArrayList<UserInfoModelItem>()

data class UserInfoModelItem(
        val addrDetail: String,
        val agentId: String,
        val agentSalesName: String,
        val apId: String,
        val areaMoney: Int,
        val artificialPerson: String,
        val artificialPersonCardNumber: String,
        val auditRecord: String,
        val authCardType: String,
        val authTrxType: String,
        val bankAccount: String,
        val bankAccountName: String,
        val bankAccountType: String,
        val bankCityId: String,
        val bankCode: String,
        val bankDetail: String,
        val bankDistrictId: String,
        val bankDot: String,
        val bankPhone: String,
        val bankProvinceId: String,
        val bankSettleType: Int,
        val businessLicenseBeginTime: Any?,
        val businessLicenseEndTime: Any?,
        val businessLicenseNo: String,
        val changeReason: String,
        val chinaRegionId: String,
        val cityId: String,
        val cityName: String,
        val companyRegistrationAddress: String,
        val convertCount: Int,
        val coordinate: String,
        val corporate: String,
        //declares multiple JSON fields named XXX  项目有很多好多返回createTime ,有大写小写，大小写混合，不区分大小写
        //如果每个类都定义createTime，就会有这个异常。所以吧说有的createTime抽离出去
        @SerializedName(value = "CreateTime", alternate = ["CREATETIME"])
        val createTime: CREATETIME,
        val createUserId: String,
        val creditMaxFee: Int,
        val creditRate: Int,
        val debitMaxFee: Int,
        val debitRate: Int,
        val departmentCode: String,
        val depositSwitch: String,
        val districtId: String,
        val email: String,
        val examinePassTime: ExaminePassTime,
        val examineResult: String,
        val freezeStatus: String,
        val goodsIntegral: String,
        val headUrl: String,
        val highestLevel: String,
        val id: String,
        val idCardNumber: String,
        val increaseLimitStatus: String,
        val intermediarySwitch: String,
        val invoicePrintName: String,
        val isActivate: String,
        val isBlacklist: String,
        val isBusiness: String,
        val isChange: String,
        val isQyk: String,
        val isRegister: String,
        val isTuiguang: Int,
        val isValid: String,
        val lastUpdateTime: Any?,
        val level: String,
        val levelTime: Any?,
        val linkPerson: String,
        val linkPhone: String,
        val maxFee: Int,
        val mcc: String,
        val merchantCnName: String,
        val merchantCode: String,
        val merchantEnName: String,
        val merchantMcc: String,
        val merchantNo: String,
        val merchantPosIntegral: String,
        val merchantShortName: String,
        val merchantSn: String,
        val merchantSource: String,
        val merchantStatus: String,
        val merchantType: String,
        val merchantUserid: String,
        val monthNewPosNumber: Int,
        val oneselfQuota: Int,
        val orderTime: Any?,
        val otherQuota: Int,
        val parentPhone: String,
        val partnerPoint: String,
        val passwd: String,
        val phone: String,
        val point: Int,
        val posAlreadyMoney: Int,
        val posMoney: Int,
        val procedureFee: Int,
        val productShort: String,
        val provinceId: String,
        val qqId: String,
        val qykBigRate: Int,
        val qykSingleQuota: Int,
        val qykSmallRate: Int,
        val rate: Double,
        val rcexamineResult: String,
        val reexamineResult: String,
        val remarks: String,
        val revocationTime: RevocationTime,
        val riskControlGrade: Int,
        val salesmanId: String,
        val serviceScopeItem: String,
        val serviceScopeName: String,
        val settleCycle: Int,
        val settleStatus: String,
        val status: String,
        val submitExamineTime: Any?,
        val submitReexamineTime: Any?,
        val suzerainActivityId: String,
        val t0CreditMaxFee: Int,
        val t0CreditRate: Int,
        val t0DebitMaxFee: Int,
        val t0DebitRate: Int,
        val tab: String,
        val taxRegistrationNo: String,
        val teamMoney: String,
        val totalMoney: Double,
        val transactionFlow: String,
        val uplevelTime: UplevelTime,
        val useStatus: String,
        val validTime: Any?,
        val withdrawStatus: String,
        val wkRate: Double,
        val wxId: String,
        val ykBalance: String,
        val ykBigRate: String,
        val ykLimit: String,
        val ykRate: String,
        val ykSmallRate: String
)

data class ExaminePassTime(
        val date: Int,
        val day: Int,
        val hours: Int,
        val minutes: Int,
        val month: Int,
        val nanos: Int,
        val seconds: Int,
        val time: Long,
        val timezoneOffset: Int,
        val year: Int
)

data class RevocationTime(
        val date: Int,
        val day: Int,
        val hours: Int,
        val minutes: Int,
        val month: Int,
        val nanos: Int,
        val seconds: Int,
        val time: Long,
        val timezoneOffset: Int,
        val year: Int
)

data class UplevelTime(
        val date: Int,
        val day: Int,
        val hours: Int,
        val minutes: Int,
        val month: Int,
        val nanos: Int,
        val seconds: Int,
        val time: Long,
        val timezoneOffset: Int,
        val year: Int
)